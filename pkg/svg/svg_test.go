package svg

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"gonum.org/v1/gonum/spatial/r2"
)

const (
	eps      = 2e-10
	longPath = `
m 88.778376,117.83349 c 0,0 -2.667476,-17.00607 -4.035145,-14.03895 -1.367668,2.9671 -14.342768,3.80232 -17.153273,4.65633 -2.810507,0.85401 2.153556,-13.422978 3.89394,-15.309528 1.740381,-1.88655 8.631438,-2.246732 14.00581,-3.30329 0.01044,-2.69775 -29.03398,7.07795 -25.580356,6.50896 2.683657,-2.177316 8.133449,-3.087431 12.111693,-4.742993 C 75.08187,90.330245 68.499299,62.059775 67.690182,68.044107 66.881065,74.028437 56.709164,77.610475 55.168189,73.375924 53.627213,69.141371 68.149313,48.535791 68.60033,45.527966 69.051347,42.52014 91.437499,27.461943 95.316039,24.985525 c 3.878541,-2.476421 8.651811,0.095 7.038791,-3.293891 -1.61301,-3.388891 -28.917519,16.391909 -31.270744,19.682664 -2.353226,3.290755 15.916322,-0.886098 21.398478,-2.35608 5.482156,-1.469983 6.403521,3.404738 2.641911,11.336168 -3.761611,7.931433 -23.133103,-6.215222 -24.110308,-7.863732 -0.977204,-1.648511 -33.666383,-18.58778 -36.399632,-19.439702 -2.733249,-0.851921 0.765268,3.752213 2.545326,2.444055 1.780056,-1.308159 26.369896,12.359126 29.43932,15.56114 3.069423,3.202014 0.766312,2.428396 -13.77169,0.350793 -14.537999,-2.077604 -12.944824,3.954753 -7.690262,11.584463 5.254561,7.62971 24.272456,-10.584291 24.272456,-10.584291 -14.799004,3.054808 -14.315622,5.15538 -14.315622,5.15538 0,0 0.759578,-0.135892 1.260471,-0.935585 0.500892,-0.799693 -1.78256,-0.94125 -1.707353,-0.463243 0.07521,0.478007 3.261429,1.769826 2.988467,1.10117 -0.272962,-0.668656 -4.756262,-1.08742 -3.850263,-0.602123 0.905998,0.485297 6.0096,-0.321224 4.616551,-0.399569 -1.393049,-0.07835 -5.454356,0.956106 -4.499449,1.156906 0.954907,0.2008 5.031347,-1.678377 4.37441,-1.616827 -0.656937,0.06155 -4.574379,1.362228 -4.574379,1.362228 15.846116,-4.864321 17.830676,-4.484315 17.830676,-4.484315 0,0 12.641439,2.707753 12.946146,3.497664 0.304706,0.789911 -0.368841,0.718026 -0.305445,-0.02648 0.0634,-0.74451 1.590342,-1.726823 0.688496,-0.725223 -0.901846,1.0016 -1.395171,1.978469 -1.008244,0.978161 0.386928,-1.000308 2.826517,-0.456783 1.150631,-0.345217 -1.675885,0.111565 -3.727716,-0.14654 -1.761428,-0.323439 1.966289,-0.1769 3.25986,-0.797848 1.751831,-0.05352
`
)

func TestParsePath(t *testing.T) {
	const (
		simplePath = `
m 10.0,20.0 c 0,0 10.0,20.0 -10.0,20.0 -10.0,-20.0
`
	)

	exp := []Operation{
		Operation{
			Type:   Move,
			Points: []Point{Point{10.0, 20.0}},
		},
		Operation{
			Type: Curve,
			Points: []Point{
				Point{0.0, 0.0},
				Point{10.0, 20.0},
				Point{-10.0, 20.0},
				Point{-10.0, -20.0},
			},
		},
	}

	ops, err := parsePath(simplePath)
	assert.NoError(t, err)

	assertOps(t, exp, ops)
}

func assertOps(t *testing.T, exp, out []Operation) {
	assert.Equal(t, len(exp), len(out))

	for i, ee := range exp {
		oo := out[i]

		assert.Equal(t, ee.Type, oo.Type)
		assert.Equal(t, len(ee.Points), len(oo.Points))

		for pi, ep := range ee.Points {
			op := oo.Points[pi]
			inEpsilon(t, toVec(ep), toVec(op))
		}
	}
}

func toVec(p Point) r2.Vec {
	return r2.Vec{X: p.X, Y: p.Y}
}

func inEpsilon(t *testing.T, exp, res r2.Vec) {
	assert.InDelta(t, exp.X, res.X, eps)
	assert.InDelta(t, exp.Y, res.Y, eps)
}
